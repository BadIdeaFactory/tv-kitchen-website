{"componentChunkName":"component---src-templates-docs-tpl-js","path":"/docs/recipes/extracting-captions","result":{"data":{"mdx":{"frontmatter":{"section":"1. Recipes","title":"Extracting Captions"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"score\": 1,\n  \"section\": \"1. Recipes\",\n  \"title\": \"Extracting Captions\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Many videos have closed captions baked into the data itself. This recipe shows how you can use the TV Kitchen to turn these hidden captions into a stream of text.\"), mdx(\"h2\", null, \"Components\"), mdx(\"h3\", null, \"Packages\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Package\")), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Description\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@tvkitchen/countertop\"\n  }), \"@tvkitchen/countertop\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"The entry point for developers who want to set up a TV Kitchen.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@tvkitchen/appliance-video-file-receiver\"\n  }), \"@tvkitchen/appliance-video-file-receiver\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Converts a video file into MPEG-TS Payloads.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@tvkitchen/appliance-video-caption-extractor\"\n  }), \"@tvkitchen/appliance-video-caption-extractor\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Extracts captions from MPEG-TS Payloads using CCExtractor.\")))), mdx(\"h3\", null, \"Output Streams\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Type\")), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Description\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"\"\n  }), \"STREAM.CONTAINER\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Chunks of MPEG-TS data.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"\"\n  }), \"TEXT.ATOM\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"A stream of characters.\")))), mdx(\"h2\", null, \"The Recipe\"), mdx(\"p\", null, \"Estimated Cook Time: 5 minutes\"), mdx(\"h3\", null, \"Preparation\"), mdx(\"p\", null, \"You will need:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://ccextractor.org/\"\n  }), \"CCExtractor\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://ffmpeg.org/\"\n  }), \"FFmpeg\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"running-kafka\"\n  }), \"running Kafka instance\"))), mdx(\"h3\", null, \"Instructions\"), mdx(\"h4\", null, \"Step 1: Set up a new project\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"mkdir my-recipe\\ncd my-recipe\\nyarn init\\n\")), mdx(\"h4\", null, \"Step 2: Install TV Kitchen components\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"yarn add @tvkitchen/countertop\\nyarn add @tvkitchen/appliance-video-caption-extractor\\nyarn add @tvkitchen/appliance-video-file-receiver\\n\")), mdx(\"h4\", null, \"Step 3: Write some code\"), mdx(\"p\", null, \"Open a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" and import the TV Kitchen packages.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const { Countertop } = require('@tvkitchen/countertop');\\nconst { VideoCaptionExtractorAppliance } = require('@tvkitchen/appliance-video-caption-extractor');\\nconst { VideoFileReceiverAppliance } = require('@tvkitchen/appliance-video-file-receiver');\\n\")), mdx(\"p\", null, \"From here, create your \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@tvkitchen/countertop\"\n  }), \"Countertop\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const countertop = new Countertop();\\n\")), mdx(\"p\", null, \"We have to give the countertop some video to process. This is done by adding a video receiver appliance. This recipe will use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@tvkitchen/appliance-video-file-receiver\"\n  }), \"VideoFileReceiverAppliance\"), \", but you can actually use any appliance that produces \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"STREAM.CONTAINER\"), \" data.\"), mdx(\"p\", null, \"For instance, you could use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@tvkitchen/appliance-video-http-receiver\"\n  }), \"VideoHttpReceiverAppliance\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VideoFileReceiverAppliance\"), \" has one required parameter: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filePath\"), \". If you don't have a sample video file that contains closed captions, you can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tvkitchen/cookbook/blob/master/recipes/extracting-captions/data/sample.ts\"\n  }), \"this one\"), \". Just put it in your recipe directory in a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sample.ts\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"countertop.addAppliance(\\n  VideoFileReceiverAppliance,\\n  {\\n    filePath: './sample.ts'\\n  }\\n);\\n\")), mdx(\"p\", null, \"Next, set up the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@tvkitchen/appliance-video-caption-extractor\"\n  }), \"VideoCaptionExtractorAppliance\"), \", which will watch for video data and turn it into captions.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"countertop.addAppliance(VideoCaptionExtractorAppliance);\\n\")), mdx(\"p\", null, \"Everything is set up, but we should do something with the resulting captions.  For this recipe we'll just output them to the console, but there are plenty of more interesting possibilities.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"countertop.on('data', (payload) => {\\n  if (payload.type === 'TEXT.ATOM') {\\n    process.stdout.write(payload.data);\\n  }\\n});\\n\")), mdx(\"p\", null, \"Add some code to start the countertop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"countertop.start();\\n\")), mdx(\"p\", null, \"Finally, run your script!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn node index.js\\n\")), mdx(\"p\", null, \"You should see a stream of captions within a few seconds.\"), mdx(\"h3\", null, \"The Result\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"index.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const { Countertop } = require('@tvkitchen/countertop');\\nconst { VideoCaptionExtractorAppliance } = require('@tvkitchen/appliance-video-caption-extractor');\\nconst { VideoFileReceiverAppliance } = require('@tvkitchen/appliance-video-file-receiver');\\n\\nconst countertop = new Countertop();\\n\\ncountertop.addAppliance(\\n  VideoFileReceiverAppliance,\\n  {\\n    filePath: './sample.ts'\\n  }\\n);\\n\\ncountertop.addAppliance(VideoCaptionExtractorAppliance);\\n\\ncountertop.on('data', (payload) => {\\n  if (payload.type === 'TEXT.ATOM') {\\n    process.stdout.write(payload.data);\\n  }\\n});\\n\\ncountertop.start();\\n\")), mdx(\"h3\", null, \"Troubleshooting\"), mdx(\"h4\", null, \"Kafka\"), mdx(\"p\", null, \"Remember that for any recipe to work you need a running instance of Kafka. By default, TV Kitchen assumes Kafka will be available locally (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"127.0.0.1\"), \") on port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"9092\"), \". If you want to use an existing Kafka server somewhere else, you can pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kafkaSettings\"), \" to the countertop to pass a different configuration value. TV Kitchen is using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kafka.js.org/docs/configuration\"\n  }), \"KafkaJS\"), \".\"), mdx(\"h4\", null, \"Something Else?\"), mdx(\"p\", null, \"If you're stuck, check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/help\"\n  }), \"help page!\")), mdx(\"h3\", null, \"A Precooked Version\"), mdx(\"p\", null, \"Don't want to implement this recipe yourself?\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tvkitchen/cookbook\"\n  }), \"Clone the cookbook\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git clone https://github.com/tvkitchen/cookbook.git\\n\")), mdx(\"p\", null, \"and run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn kafka\\nyarn start extracting-captions\\n\")), mdx(\"p\", null, \"The code can be \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tvkitchen/cookbook/blob/master/recipes/extracting-captions/src/index.js\"\n  }), \"found here\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"allMdx":{"edges":[{"node":{"id":"59a90374-9d99-50f0-8b34-1c9c39e3aa26","fileAbsolutePath":"/Users/slifty/Dropbox/Code/NodeJS/tvkitchen/website/src/content/docs/index.mdx","slug":"docs/","frontmatter":{"score":1,"section":null,"title":"Introduction"}}},{"node":{"id":"cd412def-3fc5-53d0-b07c-a25dfa999e3b","fileAbsolutePath":"/Users/slifty/Dropbox/Code/NodeJS/tvkitchen/website/src/content/docs/building-appliances.mdx","slug":"docs/building-appliances","frontmatter":{"score":3,"section":null,"title":"Building Appliances"}}},{"node":{"id":"a8fc9250-ba31-59dd-89e1-2240bc7eb03a","fileAbsolutePath":"/Users/slifty/Dropbox/Code/NodeJS/tvkitchen/website/src/content/docs/contributing/overview.mdx","slug":"docs/contributing/overview","frontmatter":{"score":1,"section":"2. Contributing","title":"Overview"}}},{"node":{"id":"5be5b982-bb99-5734-9d04-d55ba456fcd2","fileAbsolutePath":"/Users/slifty/Dropbox/Code/NodeJS/tvkitchen/website/src/content/docs/contributing/resources.mdx","slug":"docs/contributing/resources","frontmatter":{"score":4,"section":"2. Contributing","title":"Resources"}}},{"node":{"id":"7ea5ad55-97d5-573a-9382-e2200aafe90b","fileAbsolutePath":"/Users/slifty/Dropbox/Code/NodeJS/tvkitchen/website/src/content/docs/quick-start.mdx","slug":"docs/quick-start","frontmatter":{"score":2,"section":null,"title":"Quick Start"}}},{"node":{"id":"94d1496c-32db-590d-b6e3-70d1b5499ada","fileAbsolutePath":"/Users/slifty/Dropbox/Code/NodeJS/tvkitchen/website/src/content/docs/recipes/extracting-captions.mdx","slug":"docs/recipes/extracting-captions","frontmatter":{"score":1,"section":"1. Recipes","title":"Extracting Captions"}}}]}},"pageContext":{"id":"94d1496c-32db-590d-b6e3-70d1b5499ada"}},"staticQueryHashes":[]}